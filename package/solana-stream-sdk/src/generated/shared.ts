// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v3.19.1
// source: shared.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import { Timestamp } from './google/protobuf/timestamp'

export const protobufPackage = 'shared'

export interface Header {
  ts: Date | undefined
}

export interface Heartbeat {
  count: number
}

export interface Socket {
  ip: string
  port: number
}

function createBaseHeader(): Header {
  return { ts: undefined }
}

export const Header: MessageFns<Header> = {
  encode(
    message: Header,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ts !== undefined) {
      Timestamp.encode(toTimestamp(message.ts), writer.uint32(10).fork()).join()
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Header {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseHeader()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.ts = fromTimestamp(Timestamp.decode(reader, reader.uint32()))
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): Header {
    return { ts: isSet(object.ts) ? fromJsonTimestamp(object.ts) : undefined }
  },

  toJSON(message: Header): unknown {
    const obj: any = {}
    if (message.ts !== undefined) {
      obj.ts = message.ts.toISOString()
    }
    return obj
  },

  create<I extends Exact<DeepPartial<Header>, I>>(base?: I): Header {
    return Header.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<Header>, I>>(object: I): Header {
    const message = createBaseHeader()
    message.ts = object.ts ?? undefined
    return message
  },
}

function createBaseHeartbeat(): Heartbeat {
  return { count: 0 }
}

export const Heartbeat: MessageFns<Heartbeat> = {
  encode(
    message: Heartbeat,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.count !== 0) {
      writer.uint32(8).uint64(message.count)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Heartbeat {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseHeartbeat()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break
          }

          message.count = longToNumber(reader.uint64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): Heartbeat {
    return { count: isSet(object.count) ? globalThis.Number(object.count) : 0 }
  },

  toJSON(message: Heartbeat): unknown {
    const obj: any = {}
    if (message.count !== 0) {
      obj.count = Math.round(message.count)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<Heartbeat>, I>>(base?: I): Heartbeat {
    return Heartbeat.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<Heartbeat>, I>>(
    object: I,
  ): Heartbeat {
    const message = createBaseHeartbeat()
    message.count = object.count ?? 0
    return message
  },
}

function createBaseSocket(): Socket {
  return { ip: '', port: 0 }
}

export const Socket: MessageFns<Socket> = {
  encode(
    message: Socket,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.ip !== '') {
      writer.uint32(10).string(message.ip)
    }
    if (message.port !== 0) {
      writer.uint32(16).int64(message.port)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Socket {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseSocket()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.ip = reader.string()
          continue
        }
        case 2: {
          if (tag !== 16) {
            break
          }

          message.port = longToNumber(reader.int64())
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  },

  fromJSON(object: any): Socket {
    return {
      ip: isSet(object.ip) ? globalThis.String(object.ip) : '',
      port: isSet(object.port) ? globalThis.Number(object.port) : 0,
    }
  },

  toJSON(message: Socket): unknown {
    const obj: any = {}
    if (message.ip !== '') {
      obj.ip = message.ip
    }
    if (message.port !== 0) {
      obj.port = Math.round(message.port)
    }
    return obj
  },

  create<I extends Exact<DeepPartial<Socket>, I>>(base?: I): Socket {
    return Socket.fromPartial(base ?? ({} as any))
  },
  fromPartial<I extends Exact<DeepPartial<Socket>, I>>(object: I): Socket {
    const message = createBaseSocket()
    message.ip = object.ip ?? ''
    message.port = object.port ?? 0
    return message
  },
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>

type KeysOfUnion<T> = T extends T ? keyof T : never
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never
    }

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000)
  const nanos = (date.getTime() % 1_000) * 1_000_000
  return { seconds, nanos }
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000
  millis += (t.nanos || 0) / 1_000_000
  return new globalThis.Date(millis)
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o
  } else if (typeof o === 'string') {
    return new globalThis.Date(o)
  } else {
    return fromTimestamp(Timestamp.fromJSON(o))
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString())
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error('Value is larger than Number.MAX_SAFE_INTEGER')
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error('Value is smaller than Number.MIN_SAFE_INTEGER')
  }
  return num
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
  fromJSON(object: any): T
  toJSON(message: T): unknown
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T
}
